name: Test and deploy

on:
  push:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-django-system-check:
    name: Tests - Django system check
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create Docker network
        run: docker network create uccser-development-proxy
      - name: Start systems
        run: docker-compose -f docker-compose.local.yml up -d
      - name: Run Django system check
        run: docker-compose -f docker-compose.local.yml run --rm django python ./manage.py check --fail-level WARNING

  test-content:
    name: Tests - Content
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create Docker network
        run: docker network create uccser-development-proxy
      - name: Start systems
        run: docker-compose -f docker-compose.local.yml up -d
      - name: Create static files
        run: docker-compose -f docker-compose.local.yml run --rm --user="root" node npm run generate-assets
      - name: Collect static files
        run: docker-compose -f docker-compose.local.yml run --rm --user="root" django python ./manage.py collectstatic --no-input
      - name: Migrate database
        run: docker-compose -f docker-compose.local.yml run --rm django python ./manage.py migrate
      - name: Load content
        run: docker-compose -f docker-compose.local.yml run --rm django python ./manage.py update_data
      - name: Make interactive thumbnails
        run: docker-compose -f docker-compose.local.yml run --rm --user="root" puppeteer node /make-interactive-thumbnails.js
      - name: Collect static files
        run: docker-compose -f docker-compose.local.yml run --rm --user="root" django python ./manage.py collectstatic --no-input

  test-general:
    name: Tests - General
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run general tests
        run: ./dev ci test_general

  test-management:
    name: Tests - Management
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run management tests
        run: ./dev ci test_management

  test-style:
    name: Tests - Style
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run style tests
        run: ./dev ci style

  test-docs:
    name: Tests - Documentation
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt
      - name: Build documentation
        run: sphinx-build -b html -W docs/ docs/_build/

  create-static-files:
    name: Create static files
    if: |
      github.ref == 'refs/heads/develop' ||
      github.event_name == 'release'
    runs-on: ubuntu-20.04
    needs: [
      test-django-system-check,
      test-content,
      test-general,
      test-management,
      test-style,
      test-docs
    ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create Docker network
        run: docker network create uccser-development-proxy

      - name: Start system
        run: docker-compose -f docker-compose.local.yml up -d

      - name: Create production static files
        run: docker-compose -f docker-compose.local.yml run --rm --user="root" node npm run build

      - name: Collect staticfiles
        run: docker-compose -f docker-compose.local.yml run --rm --user="root" django python manage.py collectstatic --no-input

      - name: Archive static files
        run: tar czf static-files.tar.gz --directory csfieldguide/staticfiles/ .

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: static-files
          path: static-files.tar.gz
          retention-days: 3

  create-interactive-thumbnails:
    name: Create interactive thumbnails
    if: |
      github.ref == 'refs/heads/develop' ||
      github.event_name == 'release'
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        language: [
          'en',
          'de',
          'es',
        ]
      fail-fast: true
    needs: [
      test-django-system-check,
      test-content,
      test-general,
      test-management,
      test-style,
      test-docs
    ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create Docker network
        run: docker network create uccser-development-proxy

      - name: Start system
        run: docker-compose -f docker-compose.local.yml up -d

      - name: Create static files
        run: docker-compose -f docker-compose.local.yml run --rm --user="root" node npm run generate-assets

      - name: Migrate database
        run: docker-compose -f docker-compose.local.yml run --rm django python ./manage.py migrate

      - name: Load interactives
        run: docker-compose -f docker-compose.local.yml run --rm django python ./manage.py loadinteractives

      - name: Make interactive thumbnails
        run: docker-compose -f docker-compose.local.yml run --rm --user="root" puppeteer node /make-interactive-thumbnails.js --language ${{ matrix.language }}

      - name: Archive static files
        run: tar czf interactive-thumbnails.tar.gz --directory csfieldguide/build/img/interactives/thumbnails/ .

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: interactive-thumbnails-${{ matrix.language }}
          path: interactive-thumbnails.tar.gz
          retention-days: 3

  publish-dev-docker-image:
    name: Create and publish dev image
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-20.04
    needs: [
      create-static-files,
      create-interactive-thumbnails,
    ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts/

      - name: Show file tree of artifacts directory
        run: ls -R -l artifacts/

      - name: Unpack all artifacts
        run: |
          mkdir -p csfieldguide/staticfiles
          tar -xz --file artifacts/static-files/static-files.tar.gz --directory csfieldguide/staticfiles
          mkdir -p csfieldguide/staticfiles/img/interactives/thumbnails
          ls artifacts/interactive-thumbnails-*/interactive-thumbnails.tar.gz | xargs -n1 tar -xz --directory csfieldguide/staticfiles/img/interactives/thumbnails --file

      - name: Log in to ${{ env.REGISTRY }}
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2.8.0
        with:
          file: ./infrastructure/production/django/Dockerfile
          context: .
          push: true
          tags: ghcr.io/uccser/cs-field-guide:develop
          build-args: GIT_SHA=${{ github.sha }}

  publish-prod-docker-image:
    name: Create and publish prod image
    if: github.event_name == 'release'
    runs-on: ubuntu-20.04
    needs: [
      create-static-files,
      create-interactive-thumbnails,
    ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts/

      - name: Show file tree of artifacts directory
        run: ls -R -l artifacts/

      - name: Unpack all artifacts
        run: |
          mkdir -p csfieldguide/staticfiles
          tar -xz --file artifacts/static-files/static-files.tar.gz --directory csfieldguide/staticfiles
          mkdir -p csfieldguide/staticfiles/img/interactives/thumbnails
          ls artifacts/interactive-thumbnails-*/interactive-thumbnails.tar.gz | xargs -n1 tar -xz --directory csfieldguide/staticfiles/img/interactives/thumbnails --file

      - name: Log in to ${{ env.REGISTRY }}
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag,enable=true

      - name: Build and push Docker image
        uses: docker/build-push-action@v2.8.0
        with:
          file: ./infrastructure/production/django/Dockerfile
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: GIT_SHA=${{ github.sha }}
